generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  fullName       String
  profilePicture String?
  gender         String
  birthdate      DateTime
  email          String          @unique
  password       String
  isAdmin        Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  comments       Comment[]
  medicalRecords MedicalRecord[]
  pets           Pet[]
  posts          Post[]
  replies        Reply[]
  tasks          Task[]
}

model Pet {
  id             Int             @id @default(autoincrement())
  userId         Int
  name           String
  petPicture     String?
  age            Int
  type           String
  breed          String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  medicalRecords MedicalRecord[]
  user           User            @relation(fields: [userId], references: [id])
  tasks          Task[]
}

model Task {
  id          Int      @id @default(autoincrement())
  userId      Int
  petId       Int
  type        String
  description String
  time        DateTime
  frequency   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  pet         Pet      @relation(fields: [petId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model Post {
  id        Int       @id @default(autoincrement())
  userId    Int
  content   String
  likes     Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  caption   String?
  comments  Comment[]
  user      User      @relation(fields: [userId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
  replies   Reply[]
}

model Reply {
  id        Int      @id @default(autoincrement())
  userId    Int
  commentId Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
}

model MedicalRecord {
  id          Int      @id @default(autoincrement())
  userId      Int
  petId       Int
  diagnose    String
  vetName     String
  medication  String
  description String
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  pet         Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Shop {
  id            Int      @id @default(autoincrement())
  name          String
  latitude      Float
  longitude     Float
  type          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  image         String?
  workingDays   String?
  workingHours  String?
  contactNumber String?
}
